{
  
    
        "post0": {
            "title": "_05_05_how_to_type_in_hinglish",
            "content": "Introduction . I belong to a generation of Indians who have largely gotten separated from our roots. Large part of this is owing to the “English Medium” phenomenon where every success metric and qualification criteria has been judged against your fluency in English. But in addition to this , technology also plays a big role. Since everything is in english , we type in english , speak in english and communicate in English. Even when we have to communicate in Hindi , we type in English . Under these conditions , Google Doc has introduced a wonderful feature , where you can type in english which gets converted to hindi. So here is how you do it. When you open the interface this is what you see:- . . On the top right corner you should see a hindi vowel :aa . Click on it and see the magic. You can type words of hindi with english spelling and it will convert it correctly. . . में इस feature से बहुत impress हुआ हूँ . Conclusion . अपनी मातृभाषा में अपने बिचारों को रख पाना एक बहुत बहुमूलिया प्रतिभा है। इतने सालों तक इंडिया से बहार रहने के बाद मुझे व्यतीत होता है की मैं बात तो कर लेता हूँ लेकिन कन्विंस नहीं कर पाता। होपफ़ुल्ली थिस शुड हेल्प रेसोल्वे िट। .",
            "url": "https://fastpagesdev.netlify.app/2020/05/08/_05_05_How_to_type_in_hinglish.html",
            "relUrl": "/2020/05/08/_05_05_How_to_type_in_hinglish.html",
            "date": " • May 8, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Strawberry Vanilla Pancakes",
            "content": "Ready in 20 minutes . Serves 8 people . 280 calories . Ingredients . Lorem ipsum dolor sit amet . | Consectetuer adipiscing elit . | Suspendisse scelerisque . | Libero interdum auctor . | . Preparation . Lorem ipsum dolor sit amet consectetuer adipiscing elit sed do tempor incididunt ut labore et dolore magna aliqua. . | Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. . | Suspendisse scelerisque mi a mi. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed dolore eiusmod tempor. . | Vestibulum ante ipsum primis elementum, libero interdum auctor cursus, sapien enim dictum quam. . | Phasellus vehicula nonummy nunc. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut enim ad minim veniam, quis nostrud exercitation. . | Ullamco laboris nisi ut aliquip ex ea commodo consequat. . | Tips . Lorem ipsum dolor sit amet consectetuer adipiscing elit sed do tempor incididunt ut labore et dolore magna aliqua. .",
            "url": "https://fastpagesdev.netlify.app/2020/05/08/Strawberry-Vanilla-Pancakes.html",
            "relUrl": "/2020/05/08/Strawberry-Vanilla-Pancakes.html",
            "date": " • May 8, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "This is a test for Beauti",
            "content": "I love cooking . .",
            "url": "https://fastpagesdev.netlify.app/recipe/2020/05/07/this-is-a-test-for-beauti.html",
            "relUrl": "/recipe/2020/05/07/this-is-a-test-for-beauti.html",
            "date": " • May 7, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "This is merge Check",
            "content": "Trial Post for checking merge triggers. I like it very much .",
            "url": "https://fastpagesdev.netlify.app/fastpages/netlify%20cms/2020/05/07/this-is-merge-check.html",
            "relUrl": "/fastpages/netlify%20cms/2020/05/07/this-is-merge-check.html",
            "date": " • May 7, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Test From Netlify CMS",
            "content": "I am writing a test post let’s see what happens .",
            "url": "https://fastpagesdev.netlify.app/2020/05/07/test-from-netlify-cms.html",
            "relUrl": "/2020/05/07/test-from-netlify-cms.html",
            "date": " • May 7, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "How to Integrate Netlify CMS with Fastpages",
            "content": "1 Introduction . Fastpages is a wonderful piece of technology created by FastAI team which enables painless blogging with Jupyter Notebook, Word documents or Markdown. I have been hacking around FastPages to see how far I can strech it to enable blogging with other tools I am interested in learning. I have already blogged about integrating Fastpages with Oberservable notebook, a great place to learn d3 and web visualization; and org mode which is an incredible powerful tool for various scenarios including writing, literate programming or GTD. These workflow are incredibly easy once everything is setup; nevertheless these are all expert level workflows for writing which requires personnel who are little bit adept in technology. Even when you are using a word file, you need to have a dedicated github account, need to upload the file and write commit message.Data Scientists are usually well versed in these, but for people not coming from programming background, these thing can be a bit overwhelming initially. A Content Management System in this regard is excellent tool for focussing on writing and editing rather than programming concepts. In this context, I want to experiment with integration of the same and quickly examine the new workflows possible for content generation. . 2 Netlify CMS . Usually CMS are associated with frameworks like wordpress , where content is backed up with a database. For static sites there are no databases. Now in this context, editing workflows are usually driven by structure or organization of your folders/ content . This is sometime also referred to as your content model or data model. Netlify CMS provide workflow to manage the same quite easily from a web interface. So enough chit chat lets get started with some code and steps to implement the same . 3 So what do we need to do? . I take inspiration from Netlify tutorial to migrate an existing website. Since Fastpages is based on jekyll framework. We will follow the workflow for the same . First thing we need to do is to create an admin folder in root location (&quot;/&quot;) of our project directory. | Next add two files to admin folder with following contnet . index.html | . Index.html . config.html | . backend: name: git-gateway branch: master # Branch to update (optional; defaults to master) publish_mode: editorial_workflow media_folder: images collections: - name: &quot;post&quot; # Used in routes, e.g., /admin/collections/blog label: &quot;Post&quot; # Used in the UI folder: &quot;_posts&quot; # The path to the folder where the documents are stored create: true # Allow users to create new documents in this collection slug: &quot;&quot; # Filename template, e.g., YYYY-MM-DD-title.md fields: # The fields for each document, usually in front matter - {label: &quot;Layout&quot;, name: &quot;layout&quot;, widget: &quot;hidden&quot;, default: &quot;post&quot;} - {label: &quot;Title&quot;, name: &quot;title&quot;, widget: &quot;string&quot;} - {label: &quot;Publish Date&quot;, name: &quot;date&quot;, widget: &quot;datetime&quot;} - {label: &quot;Categories&quot;, name: &quot;categories&quot;, widget: &quot;list&quot;} - {label: &quot;Body&quot;, name: &quot;body&quot;, widget: &quot;markdown&quot;} - name: &quot;page&quot; # Used in routes, e.g., /admin/collections/pages label: &quot;Page&quot; # Used in the UI folder: &quot;_pages&quot; # The path to the folder where the documents are stored create: true # Allow users to create new documents in this collection slug: &quot;&quot; # Filename template, e.g.,title.md fields: # The fields for each document, usually in front matter - {label: &quot;Layout&quot;, name: &quot;layout&quot;, widget: &quot;hidden&quot;, default: &quot;page&quot;} - {label: &quot;Title&quot;, name: &quot;title&quot;, widget: &quot;string&quot;} - {label: &quot;Permalink&quot;, name: &quot;permalink&quot;, widget: &quot;string&quot;} - {label: &quot;Body&quot;, name: &quot;body&quot;, widget: &quot;markdown&quot;} . . | Tutorial goes into a lot of detail about configuring the config.yml correctly .However I always believe in doing things in small pieces. Making some changes and then looking at the output to figure out what has happened. So now what I do is commit the code. Based on the description presented, we should have an url with admin page in the rendered site. So let&#39;s go there and examine the output. CMS Error | . The link indicates our configuration is incomplete and gives us recommendation of things that are require fixing. .",
            "url": "https://fastpagesdev.netlify.app/fastpages/orgmode/2020/05/07/Integrating-NetlifyCMS-with-Fastpages.html",
            "relUrl": "/fastpages/orgmode/2020/05/07/Integrating-NetlifyCMS-with-Fastpages.html",
            "date": " • May 7, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "How To Type In Hinglish",
            "content": "Introduction . I belong to a generation of Indians who have largely gotten separated from our roots. Large part of this is owing to the “English Medium” phenomenon where every success metric and qualification criteria has been judged against your fluency in English. But in addition to this , technology also plays a big role. Since everything is in english , we type in english , speak in english and communicate in English. Even when we have to communicate in Hindi , we type in English . Under these conditions , Google Doc has introduced a wonderful feature , where you can type in english which gets converted to hindi. So here is how you do it. When you open the interface this is what you see:- . . On the top right corner you should see a hindi vowel :aa . Click on it and see the magic. You can type words of hindi with english spelling and it will convert it correctly. . . में इस feature से बहुत impress हुआ हूँ . Conclusion . अपनी मातृभाषा में अपने बिचारों को रख पाना एक बहुत बहुमूलिया प्रतिभा है। इतने सालों तक इंडिया से बहार रहने के बाद मुझे व्यतीत होता है की मैं बात तो कर लेता हूँ लेकिन कन्विंस नहीं कर पाता। होपफ़ुल्ली थिस शुड हेल्प रेसोल्वे िट। .",
            "url": "https://fastpagesdev.netlify.app/2020/05/05/How-to-type-in-hinglish.html",
            "relUrl": "/2020/05/05/How-to-type-in-hinglish.html",
            "date": " • May 5, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Awesome Org Mode links",
            "content": "1 Introduction . In this post I want to reveiw the link functionality in org mode 9.0. Purpose of the exercise is to understand how to implement link functionality. I eventually want to use this to encapsulate iframe, include or other liquid or html directives in fastpages jekyll blog inside the link. . This will be useful for following :- . Define Links which can help avoid writing raw html and include directives | Define different backends for different rendering targets | Allow me to use org mode navigation | . Above notes will become clear towards the end of this post. As a reference I will be following the tutorial from this link. . 2 FastPages link . Lot of bells and whistle related to boxes and link are enabled using org mode link functionality . Links are prepended by a directive | When doing html export link get converted into jekyll include statement already defined in the code | When exporting to other backends it follows the same structure as normal link for that structure | . 2.1 Youtube Video Link . You can embed individual video or even playlist . [[yt:https://youtu.be/5haX95nk02E][New Link Feature Org Mode]] . . [[yt:https://www.youtube.com/playlist?list=PLxc79l2wpbJYTI5rv2os7OoKQMqxReZpr][The Playlist for Org Mode]] . . 2.2 Twitter Card Link . [[twitter:https://twitter.com/jakevdp/status/1204765621767901185?s=20][Altair v4 release]] . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . 2.3 Remote Image Link . [[img:https://www.fast.ai/images/fastai_paper/show_batch.png][Credits: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/]] . Credits: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/ . [[img:https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif]] . . 2.4 Local Images . [[img:/images/Emacs.png][Emacs is the king]] . Emacs is the king . This has been awesome so far. . 2.5 Boxes and Stuff . [[alert:This is an alert box]] [[alert:box][Danger ahead]] [[info:This is info box]] [[info:box][This is for your information]] [[warning:box][You have been warned]] [[important:box][This is important]] [[tip:box][You are going to get lucky with emacs]] [[note:box][This is a note]] *I am currently in process of fixing doclink functionality inside note box* [[note:box][A doc link to [an example website: fast.ai](https://www.fast.ai/) don&#39;t work yet.]] . . This is an alert box . . Danger ahead . . This is info box . . This is for your information . . Warning: You have been warned . . Important: This is important . . Tip: You are going to get lucky with emacs . . Note: This is a note . I am currently in process of fixing doclink functionality inside note box . Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) don&#39;t work yet. . 2.6 IFrames and Revealjs Presentation . [[iframe:https://revealjs.com][Reveal JS Presentation]] . You can embed websites as iframes. This is particularily useful for embedding revealjs presentation like this. . Infact it is also possible to create revealjs presentation directly from org mode. I will be working on integrating the same in next few days. . You can also embed powerpoint presentation . Ceci est un document Microsoft Office incorporé, avec Office.",
            "url": "https://fastpagesdev.netlify.app/orgmode/2020/04/29/Awesome-Org-Mode-Links.html",
            "relUrl": "/orgmode/2020/04/29/Awesome-Org-Mode-Links.html",
            "date": " • Apr 29, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Blogging with Org mode and FastPages",
            "content": "1 Introduction . Jeremy and Rachel, esteemed founders of fastai, quote Blogging is like Resume, only better in this post. Blogging really is one of the best medium to learn while doing. It helps to communicate and formulate ideas, and share knowledge with your peers and colleagues. Blogging for me addresses provides three main motivations: . It helps in improving communication and writing skills. | It provide medium to showcase technical expertise in programming, data science and other domains. | It is a great medium for self learning and teaching. | With nbdev, fastai library and video courses; Fastai team has contributed some of the best material and tools for learning data science specificaaly and programming in general. The top down learning style , with focus on learning the big picture by execution and programming, is an amazingly useful and productive technique especially for someone who is working full time. . Fastpages is the recent addition in the same tradition of tools made available by FastAI team to new and practicing data scientist to facilitate there learning journey. It capitalizes on nbdev codebases, a python literate programming tool and github actions to enable blogging by jupyter notebook and markdown files. . My objective in this post is to showcase some of the minor changes which I have made which enables me to use entire toolchain of fastpages; to blog with emacs org mode along with notebook, markdown or word format. I also intend to demonstrate how powerful org mode really is ; and why it belongs in a Data Scientist toolbox alongwith the list of tools mentioned above. . 2 EMACS ORG-MODE: WHAT? WHY? HOW? . BEFORE CAME JUPYTER, BEFORE CAME INTERNET AND EVEN BEFORE THERE WERE PERSONAL COMPUTERS.THERE WAS SOMETHING CALLED EMACS . 2.1 The What? . So what is org-mode? At the very basic level org mode or org format is a text markup defined for structured text editing. It is similar to markdown as it is defined in plaintext, priortizes readability and has an human centric approach. Combination with emacs elisp system makes it insanely powerful. Instead of yet another markup syntax; it becomes a system of text editing which is highly extensible and infinitely programmable. With various open source plugins&#39; it can be used like a literate programming tool like notebooks or frontend for latex report creation or even online presentations. . 2.2 The Why? . So why should you be interested in Org Mode .Here is a brief list of things that you can do with it. . 2.2.1 Blogging . You can write a blog post like this. Since Emacs is insanely powerful for text editing you can do really fast typing. . 2.2.2 FastPages Functionality . Lot of bells and whistle related to boxes and link are enabled using org mode link functionality . Links are prepended by a directive | When doing html export link get converted into jekyll include statement already defined in the code | When exporting to other backends it follows the same structure as normal link for that structure | . Youtube Video Link You can embed individual video or even playlist . [[yt:https://youtu.be/5haX95nk02E][New Link Feature Org Mode]] . . [[yt:https://www.youtube.com/playlist?list=PLxc79l2wpbJYTI5rv2os7OoKQMqxReZpr][The Playlist for Org Mode]] . . | Twitter Card Link [[twitter:https://twitter.com/jakevdp/status/1204765621767901185?s=20][Altair v4 release]] . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . | Remote Image Link [[img:https://www.fast.ai/images/fastai_paper/show_batch.png][Credits: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/]] . Credits: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/ . [[img:https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif]] . . | Local Images [[img:/images/Emacs.png][Emacs is the king]] . Emacs is the king . This has been awesome so far. . | Boxes and Stuff [[alert:This is an alert box]] [[alert:box][Danger ahead]] [[info:This is info box]] [[info:box][This is for your information]] [[warning:box][You have been warned]] [[important:box][This is important]] [[tip:box][You are going to get lucky with emacs]] [[note:box][This is a note]] *I am currently in process of fixing doclink functionality inside note box* [[note:box][A doc link to [an example website: fast.ai](https://www.fast.ai/) don&#39;t work yet.]] . . This is an alert box . . Danger ahead . . This is info box . . This is for your information . . Warning: You have been warned . . Important: This is important . . Tip: You are going to get lucky with emacs . . Note: This is a note . I am currently in process of fixing doclink functionality inside note box . Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) don&#39;t work yet. . | IFrames and Revealjs Presentation [[iframe:https://revealjs.com][Reveal JS Presentation]] . You can embed websites as iframes. This is particularily useful for embedding revealjs presentation like this. . Infact it is also possible to create revealjs presentation directly from org mode. I will be working on integrating the same in next few days. . You can also embed powerpoint presentation . Ceci est un document Microsoft Office incorporé, avec Office. | 2.2.3 Document Embedding . For a longish article, sometimes you would like to split it in different files and combine them together. This workflow is usually better for writing as well; as each document can be focussed on a single aspect of entire topic you want to present in your article. . In org-mode it is trivial to do this using `#+INCLUDE` functionality. As an example above section on Fastpages functionality is actually part of a different blog published in here. I have just imported relevant portions for this post. Code/ configuration files in the bottom section are embedded using the same technique. . #+INCLUDE: &quot;2020-04-29-Awesome-Org-Mode-Links.org::FastPages link&quot; :only-contents t . 2.2.4 Literate Programming . You can do literate programming just like jupyter notebooks, create technical reports, even write full fledged books. Org mode also supports various export backends which means same document can be converted to a html blog, a latex report, beamer or revealjs presentations. Here are a few good links to explore . A Multi-Language Computing Environment for Literate programming and Reproducible Research here | Org Mode Recipes | . . Literate programming in python with org-mode and noweb here | . 2.2.5 GTD, Task Manager, Todo . You can use it as task manager, do project management, create to do list. Follow the recommendations of GTD managing your life in a text edit. And many many more things as described here . 2.2.6 Are you excited? . What I have done is just touch upon the surface of what is possible with org mode, and by extension blogging on fastpages with org mode. There are many more options and functionality available in org mode including beamer presentation, spreadsheets , agenda views etc&amp;#x2026; which are awesome but too broad to cover in this introductory blog post. However over time I will continue to post articles on some tidbits&#39; here and there which can greatly enhance your blogging workflow. Now I hope I have motivated you enough, so time to figure out to do it yourself. . 2.3 The How? . I have already shown earlier what org mode can do and how it can enhance your writing workflow. Now I will describe how you can do it yourself. Before I go into specifics let me share a bit on general design of fastpages and describe how it can be extended. . 2.3.1 Design of fastpages . So here is brief synopsis. Fastpages is based on Jekyll. It already provides you functionality to write a blog in markdown, notebook or word document. This is how it works . Markdown Blogging Markdown is the native format for Jekyll Blogging Engine. Jekyll uses an enhanced version of Markdown called Kramdown which comes with addtional functionality for source code coloring links etc&amp;#x2026; | Layout of Jekyll (Structure of html) is written in `Liquid` template engine. You have liquid templates in two places _layouts folder - used for defining page/post structure. | _includes folder - used to define general html blocks or additional functionality which may be included in an article | . | YAML Front Matter - Each article needs to have a yaml frontmatter which defines specifics like title, author, layout to choose, comments to include or exclude , categories , tags etc&amp;#x2026; which are either generic cross cutting functionality or indicator to select some specific configuration for blogging engine. It needs to come at very top of page | . | Notebook Blogging Notebook blogging is really what makes fastpages special for data scientist.I should rather specify and say python notebook blogging is what is possible natively in fastpages. Notebook blogging is enabled by a python package called &quot;nbdev&quot; another tool from FastAI. | The way it works is as follows You need to specify front matter in first cell of notebook | Import / Export/ Hide / Show/ Collapsible hide etc&amp;#x2026; are directive implemented as comments which need to appear on top of cell to indicate inclusion or exclution from html export | In reality notebooks from _notebooks folder are converted to html[not markdown] and exported to _posts folder with a fake (.md) extension as an initial preprocessing step | From _post folder Jekyll machinery takes over to convert them into rendered site alongwith markkdown posts | Fastpages provides various shims(utlities/methods) to convert some notebook specific directives for links, youtube or boxes to liquid include templates. These are then converted by Jekyll to final version of site. | . | . | Word Blogging Word blogging structure is a similar It uses pandoc for &quot;docx&quot; to &quot;html&quot; conversion. Which is copied to _posts folder with (.md) extension | Some shim methods are provided by FastPages to handle jekyll _includes and _layout nicely | For Words there is only one place to specify &quot;Front Matter&quot;. It is _actionfiles/wordfrontmatter.txt file | . | . | Automation via Github Actions All processing automation are handled by Github Actions Checkout code to some machine | Cleaning up old _site or html | Convert files in _notebooks and _word to _posts | Building the site using Jekyll into _site | Copying / Commiting the _site folder to ghpages etc.. | . | Everything in Github Actions are handled by services/ different docker containers running different scripts | For local viewing a parallel system is provided using docker-compose.yml and Makefile. | . | 2.3.2 General Idea for extension . So based on the intuition above we basically need to figure out 3 pieces . HTML/Markdown Converter :Way to convert custom format to html( with fake .md extension) or actual kramdown style markdown. It needs to have a way to insert/ send YAML FrontMatter to exported files | Shims for Jekyll: Some customization scripts to handled Jekyll _include template nicely to manage look and feel | Automation Code Github Action [ Include an addtional conversion step in ci.yml or integrate with existing action files possibly in _actionfiles/actionentrypoint.sh ] | Update Docker Compose and Makefile | . | . 2.3.3 Org Mode Blogging . So with the ideas above , I managed to create some extensions and tricks to enable org mode blogging. It has following parts . Org File Customization A small customization is required to export frontmatter from org file. . #+OPTIONS: toc:nil #+BEGIN_EXPORT html layout: post categories: [orgmode] title: Blogging with Org mode and FastPages description: Tutorial to setup Fastpages with org mode comments: true use_math: false #+END_EXPORT # COMMENT OPTIONAL FROM HERE #+TOC: headline 3 . I use org mode specific publishing framework which comes alongwith Emacs. | In my export configuration, which I will talk about later, I have some settings which only export body of converted html document. | Here first line is for disabling toc specfic to org mode. Default org mode TOC is added on top of body before content which interferes with YAML Frontmatter | You can&#39;t include #+TITLE directive in org mode , as it is rendered before everything , and thus interfere&#39;s with Front Matter. | Then comes section for YAML front matter. Wrapping it in html export block allows this to be the first section on the file. | Things below OPTIONAL FROM HERE line need not be included. In fact I am still looking forward to customize css so that we can colorize source code similar to notebooks and markdown | . . With these simple rules, you can easily write a blog post with all the functionality of org mode. | . | FastPages Customization I have done minimal non invasive customization to enable automation for org mode in fast pages. . . Note: All the code described below is available in github repo: https://github.com/Rahuketu86/FastPagesDev . Folder Structure We need to create a _org folder . Inside _org folder , it should mirror structure of top level directories as follows . Structure of _org directory in fastpages . . Note: For local images always assume root to be _org [The structure of _org directory should be replica of blog folder structure]. Images will always start with `/images` or `/assets` . | Github Action Customization I have created some custom actions, which I save in _customactionsfiles directory at top level. It has got 3 files publish.el - Emacs script to control publishing from _org/posts to _posts folder and converting org to html. . (require &#39;package) (package-initialize) (unless package-archive-contents (add-to-list &#39;package-archives &#39;(&quot;org&quot; . &quot;https://orgmode.org/elpa/&quot;) t) (add-to-list &#39;package-archives &#39;(&quot;melpa&quot; . &quot;https://melpa.org/packages/&quot;) t) (package-refresh-contents)) (dolist (pkg &#39;(org-plus-contrib htmlize)) (unless (package-installed-p pkg) (package-install pkg))) (require &#39;org) (require &#39;ox-rss) (require &#39;ox-publish) (require &#39;ox-html) (require &#39;fpemacs) (setq org-html-htmlize-output-type nil) (setq org-publish-project-alist &#39;( (&quot;org-post-fastpages&quot; ;; Path to your org files. :base-directory &quot;./_org/_posts&quot; :base-extension &quot;org&quot; ;; Path to your Jekyll project. :publishing-directory &quot;./_posts/&quot; :recursive t :publishing-function org-fp-publish-to-html :html-extension &quot;md&quot; :body-only t ;; Only export section between &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; ) (&quot;org-static-fastpages&quot; :base-directory &quot;./_org/assets&quot; :base-extension &quot;css |js |png |jpg |gif |pdf |mp3 |ogg |swf |php&quot; :publishing-directory &quot;./assets/&quot; :recursive t :publishing-function org-publish-attachment ) (&quot;org-images-fastpages&quot; :base-directory &quot;./_org/images&quot; :base-extension &quot;css |js |png |jpg |gif |pdf |mp3 |ogg |swf |php&quot; :publishing-directory &quot;./images/&quot; :recursive t :publishing-function org-publish-attachment ) (&quot;fastpages&quot; :components (&quot;org-post-fastpages&quot; &quot;org-static-fastpages&quot; &quot;org-images-fastpages&quot;)) )) (defun fastpages-publish-all () &quot;Publish the blog to HTML.&quot; (interactive) (org-publish-all)) (provide &#39;publish) . . | fpemacs.el - Helper functions to enable links functionality translating to html/ jekyll includes. This is really the fastpages shim version of emacs. We can even call it fastpages-emacs library. All the changes should go here . Warning: This files contains include template in code and can&#39;t be rendered fully. Some lines are skipped. . (defun jekyll-include-local-img (url caption) (let ((n_url (s-lex-format &quot;${url}&quot;))) (if caption (s-lex-format &quot;&amp;lt;figure&amp;gt; &amp;lt;img src= &quot;${n_url} &quot; alt= &quot;${caption} &quot;&amp;gt; &amp;lt;figcaption&amp;gt;${caption}&amp;lt;/figcaption&amp;gt; &amp;lt;/figure&amp;gt;&quot;) (s-lex-format &quot;&amp;lt;figure&amp;gt; &amp;lt;img src= &quot;${n_url} &quot; &amp;gt; &amp;lt;/figure&amp;gt;&quot;)))) (defun embed-img (url caption) (cond ((s-starts-with? &quot;/images&quot; url) (jekyll-include-local-img url caption)) ((s-starts-with? &quot;/assets&quot; url) (jekyll-include-local-img url caption)) (t (jekyll-include-remote-img url caption)))) ;;(jekyll-include-img &quot;/images/Emacs.png&quot; &quot;Emacs&quot;) (defun embed-iframe (url) (s-lex-format &quot; &amp;lt;div style= &quot;text-align: center; &quot;&amp;gt; &amp;lt;iframe width= &quot;560 &quot; height= &quot;315 &quot; src= &quot;${url} &quot; frameborder= &quot;0 &quot; allow= &quot;autoplay; encrypted-media &quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;/div&amp;gt;&quot;)) (defun get-yt-code (url) (car (s-split &quot;&amp;amp;list=&quot; (s-chop-prefixes &#39;(&quot;https://www.youtube.com/watch?v=&quot; &quot;https://www.youtube.com/playlist?list=&quot; &quot;https://youtu.be/&quot;) url)))) ;;(get-yt-code &quot;https://www.youtube.com/watch?v=SmH3BPpl0TI&quot;) ;;(get-yt-code &quot;https://www.youtube.com/playlist?list=PLxc79l2wpbJYTI5rv2os7OoKQMqxReZpr&quot;) ;;(get-yt-code &quot;https://www.youtube.com/watch?v=SzA2YODtgK4&amp;amp;list=PLxc79l2wpbJYTI5rv2os7OoKQMqxReZpr&quot;) ;;(get-yt-code &quot;https://youtu.be/VawlmG9tsXI&quot;) (defun embed-yt(url) (if (s-starts-with? &quot;https://www.youtube.com/playlist?list=&quot; url) (let ((code (get-yt-code url)) (embed-base &quot;https://www.youtube.com/embed/videoseries?list=&quot;)) (embed-iframe (concat embed-base code))) (jekyll-include &quot;youtube.html&quot; (concat &quot;https://youtu.be/&quot; (get-yt-code url))))) ;;(embed-yt &quot;https://www.youtube.com/watch?v=SmH3BPpl0TI&quot;) ;;(embed-yt &quot;https://www.youtube.com/playlist?list=PLxc79l2wpbJYTI5rv2os7OoKQMqxReZpr&quot;) ;;(embed-yt &quot;https://youtu.be/VawlmG9tsXI&quot;) (org-link-set-parameters &quot;yt&quot; :export (lambda (path desc backend) (cond ((eq &#39;html backend) (embed-yt path )))) :help-echo &quot;This links helps in exporting link to jekyll youtube liquid template&quot;) (org-link-set-parameters &quot;twitter&quot; :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include &quot;twitter.html&quot; path )))) :help-echo &quot;This links helps in exporting link to jekyll liquid twitter template&quot;) (org-link-set-parameters &quot;img&quot; :export (lambda (path desc backend) (cond ((eq &#39;html backend) (embed-img path desc)))) :help-echo &quot;This links helps in exporting link to jekyll liquid image template&quot;) (org-link-set-parameters &quot;alert&quot; :face &#39;(:foreground &quot;red&quot; :underline t) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;alert.html&quot; &quot;text&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll alert template&quot;) (org-link-set-parameters &quot;info&quot; :face &#39;(:foreground &quot;blue&quot; :underline t) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;info.html&quot; &quot;text&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll info template&quot;) (org-link-set-parameters &quot;warning&quot; :face &#39;(:foreground &quot;pink&quot;) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;warning.html&quot; &quot;content&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll warning template&quot;) (org-link-set-parameters &quot;important&quot; :face &#39;(:foreground &quot;yellow&quot;) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;important.html&quot; &quot;content&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll important template&quot;) (org-link-set-parameters &quot;tip&quot; :face &#39;(:foreground &quot;green&quot;) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;tip.html&quot; &quot;content&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll tip template&quot;) (org-link-set-parameters &quot;note&quot; :face &#39;(:foreground &quot;light blue&quot;) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;note.html&quot; &quot;content&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll note template&quot;) (org-link-set-parameters &quot;iframe&quot; :export (lambda (path desc backend) (cond ((eq &#39;html backend) (embed-iframe path )))) :help-echo &quot;This links help in embedding iframe and revealjs presentation&quot;) (setq org-html-htmlize-output-type nil) ;; Define A new backend for fastpages html export (defun org-fp-code-folding (block) (s-lex-format &quot;&amp;lt;div class= &quot;cell border-box-sizing code_cell rendered &quot;&amp;gt; &amp;lt;details class= &quot;description &quot;&amp;gt; &amp;lt;summary class= &quot;btn btn-sm &quot; data-open= &quot;Hide Code &quot; data-close= &quot;Show Code &quot;&amp;gt;&amp;lt;/summary&amp;gt; &amp;lt;p&amp;gt; &amp;lt;div class= &quot;input &quot;&amp;gt; ${block} &amp;lt;/div&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/details&amp;gt; &amp;lt;/div&amp;gt;&quot;)) (defun org-fp-html-src-block (src-block contents info) &quot;Transcode a SRC-BLOCK element from Org to HTML. CONTENTS holds the contents of the item. INFO is a plist holding contextual information.&quot; (if (org-export-read-attribute :attr_html src-block :textarea) (org-html--textarea-block src-block) (let ((lang (org-element-property :language src-block)) (caption (org-export-get-caption src-block)) (code (org-html-format-code src-block info)) (label (let ((lbl (and (org-element-property :name src-block) (org-export-get-reference src-block info)))) (if lbl (format &quot; id= &quot;%s &quot;&quot; lbl) &quot;&quot;)))) (org-fp-code-folding (if (not lang) (format &quot;&amp;lt;pre class= &quot;example &quot;%s&amp;gt; n%s&amp;lt;/pre&amp;gt;&quot; label code) (format &quot;&amp;lt;div class= &quot;org-src-container &quot;&amp;gt; n%s%s n&amp;lt;/div&amp;gt;&quot; (if (not caption) &quot;&quot; (format &quot;&amp;lt;label class= &quot;org-src-name &quot;&amp;gt;%s&amp;lt;/label&amp;gt;&quot; (org-export-data caption info))) (jekyll-highlight lang code))))))) ;; (format &quot; n&amp;lt;pre class= &quot;src src-%s &quot;%s&amp;gt;%s&amp;lt;/pre&amp;gt;&quot; lang label code)))))) (defun org-fp-inline-src-block (inline-src-block _contents info) &quot;Transcode an INLINE-SRC-BLOCK element from Org to HTML. CONTENTS holds the contents of the item. INFO is a plist holding contextual information.&quot; (let* ((lang (org-element-property :language inline-src-block)) (code (org-html-fontify-code (org-element-property :value inline-src-block) lang)) (label (let ((lbl (and (org-element-property :name inline-src-block) (org-export-get-reference inline-src-block info)))) (if (not lbl) &quot;&quot; (format &quot; id= &quot;%s &quot;&quot; lbl))))) (jekyll-highlight lang code))) (org-export-define-derived-backend &#39;fastpages &#39;html :menu-entry &#39;(?f &quot;FastPages Export Backend&quot; ((?A &quot;As HTML Buffer (Fastpages)&quot; org-fp-export-as-html) (?a &quot;As HTML file (Fastpages)&quot; org-fp-export-to-html))) :translate-alist &#39;((inline-src-block . org-fp-inline-src-block) (src-block . org-fp-html-src-block))) ;;;###autoload (defun org-fp-export-as-html (&amp;amp;optional async subtreep visible-only body-only ext-plist) (interactive) (org-export-to-buffer &#39;fastpages &quot;*Org FP HTML Export*&quot; async subtreep visible-only body-only ext-plist (lambda () (set-auto-mode t)))) ;;;###autoload (defun org-fp-convert-region-to-html () (interactive) (org-export-replace-region-by &#39;fastpages)) ;;;###autoload (defun org-fp-export-to-html (&amp;amp;optional async subtreep visible-only body-only ext-plist) (interactive) (let* ((extension (concat (when (&amp;gt; (length org-html-extension) 0) &quot;.&quot;) (or (plist-get ext-plist :html-extension) org-html-extension &quot;html&quot;))) (file (org-export-output-file-name extension subtreep)) (org-export-coding-system org-html-coding-system)) (org-export-to-file &#39;fastpages file async subtreep visible-only body-only ext-plist))) ;;;###autoload (defun org-fp-publish-to-html (plist filename pub-dir) (org-publish-org-to &#39;fastpages filename (concat (when (&amp;gt; (length org-html-extension) 0) &quot;.&quot;) (or (plist-get plist :html-extension) org-html-extension &quot;html&quot;)) plist pub-dir)) (provide &#39;fpemacs) . . | custom.sh - Used to run emacs in batch mode with above files . #!/bin/sh echo &quot;Inside custom converter code&quot; # emacs --batch --no-init-file --load ./_custom_action_files/publish.el --funcall toggle-debug-on-error --funcall fastpages-publish-all rm -rf /root/.org-timestamps emacs --batch --no-init-file --load ./_custom_action_files/fpemacs.el --load ./_custom_action_files/publish.el --funcall toggle-debug-on-error --funcall fastpages-publish-all . . | . | Additionally I have defined a public docker image encapsulating emacs and other dependencies for add on which is available from dockerhub as rahuketu86/fastpages-emacs. I add an addtional step to convert org files in my ci.yaml to enable this conversion automatically on git push. My modified ci now looks as follows . name: CI on: push: branches: - master # need to filter here so we only deploy when there is a push to master # no filters on pull requests, so intentionally left blank pull_request: branches: - &#39;!cms**&#39; jobs: build-site: if: ( github.event.commits[0].message != &#39;Initial commit&#39; ) || github.run_number &amp;gt; 1 runs-on: ubuntu-latest steps: - name: Copy Repository Contents uses: actions/checkout@master with: persist-credentials: false - name: setup directories for Jekyll build run: | rm -rf _site sudo chmod -R 777 . - name: convert org files uses: docker://rahuketu86/fastpages-emacs if: github.event.deleted == false with: args: ./_custom_action_files/custom.sh - name: convert notebooks and word docs to posts uses: ./_action_files - name: Jekyll build uses: docker://hamelsmu/fastpages-jekyll with: args: bash -c &quot;gem install bundler &amp;amp;&amp;amp; jekyll build -V --strict_front_matter --trace&quot; env: JEKYLL_ENV: &#39;production&#39; - name: copy CNAME file into _site if CNAME exists run: | sudo chmod -R 777 _site/ cp CNAME _site/ 2&amp;gt;/dev/null || : - name: Deploy if: github.event_name == &#39;push&#39; uses: peaceiris/actions-gh-pages@v3 with: deploy_key: $ publish_dir: ./_site . . | . | Finally for local viewing I had to update docker-compose.yml to include an orgconverter service to use my rahuketu86/fastpages-emacs . version: &quot;3&quot; services: fastpages: &amp;amp;fastpages working_dir: /data environment: - INPUT_BOOL_SAVE_MARKDOWN=false build: context: ./_action_files dockerfile: ./Dockerfile image: fastpages-dev logging: driver: json-file options: max-size: 50m stdin_open: true tty: true volumes: - .:/data/ orgconverter: working_dir: /data image: rahuketu86/fastpages-emacs volumes: - .:/data/ command: _custom_action_files/custom.sh converter: &amp;lt;&amp;lt;: *fastpages command: /fastpages/action_entrypoint.sh watcher: &amp;lt;&amp;lt;: *fastpages command: watchmedo shell-command --command /fastpages/action_entrypoint.sh --pattern *.ipynb --recursive --drop jekyll: working_dir: /data image: hamelsmu/fastpages-jekyll restart: unless-stopped ports: - &quot;4000:4000&quot; volumes: - .:/data/ command: &amp;gt; bash -c &quot;gem install bundler &amp;amp;&amp;amp; jekyll serve --trace --strict_front_matter&quot; . . | Update Makefile to add a single line in convert [# convert word &amp; nb without Jekyll services] to run orgconverter alongwith nbdev converter . help: cat Makefile # start (or restart) the services server: .FORCE docker-compose down --remove-orphans || true; docker-compose up # start (or restart) the services in detached mode server-detached: .FORCE docker-compose down || true; docker-compose up -d # build or rebuild the services WITHOUT cache build: .FORCE chmod 777 Gemfile.lock docker-compose stop || true; docker-compose rm || true; docker build --no-cache -t hamelsmu/fastpages-nbdev -f _action_files/fastpages-nbdev.Dockerfile . docker build --no-cache -t hamelsmu/fastpages-jekyll -f _action_files/fastpages-jekyll.Dockerfile . docker-compose build --force-rm --no-cache # rebuild the services WITH cache quick-build: .FORCE docker-compose stop || true; docker build -t hamelsmu/fastpages-nbdev -f _action_files/fastpages-nbdev.Dockerfile . docker build -t hamelsmu/fastpages-jekyll -f _action_files/fastpages-jekyll.Dockerfile . docker-compose build # convert word &amp;amp; nb without Jekyll services convert: .FORCE docker-compose up orgconverter docker-compose up converter # stop all containers stop: .FORCE docker-compose stop docker ps | grep fastpages | awk &#39;{print $1}&#39; | xargs docker stop # remove all containers remove: .FORCE docker-compose stop || true; docker-compose rm || true; # get shell inside the notebook converter service (Must already be running) bash-nb: .FORCE docker-compose exec watcher /bin/bash # get shell inside jekyll service (Must already be running) bash-jekyll: .FORCE docker-compose exec jekyll /bin/bash # restart just the Jekyll server restart-jekyll: .FORCE docker-compose restart jekyll .FORCE: . . | . | | 2.3.4 Trying it yourself . . Tip: If you quickly want to try above setup yourself. Please follow following instruction . Create a Repository by using fastpages template repository as documented here. Please click on this link to start generating your repository from template. | After you finish the setup process by generating and storing ssh keys, clone your blog repository to local computer. | Clone or copy FastPagesDev Repository to a different folder. | Copy _org folder from FastPagesDev repository to your blog repository | Copy _customactions folder from FastPagesDev repository to your blog repository | Copy Makefile, docker-compose.yml and .github/ci.yml to your blog repository. This will overwrite the files in your blog repository. | Now you are ready. You can either build your repository locally or commit your code and see it working on published gh-pages | . 3 Conclusion and way forward . 3.1 Org Mode Bridge and Other systems . Org mode on emacs is a really powerful tool for text processing, writing and literate programming. With all the development done on this repository; it is now fairly easy to get started with org mode on fastpages. In future similar techniques can be adopted to create exporter for Rmarkdown or literate-julia or any other target. In view of author, it is important to use the language native to programming system to build these extensions. So for Rmarkdown , it would be useful to leverage existing infrastructure in &quot;knitr&quot; and &quot;bookdown/ blogdown&quot; packages rather than building things from scratch or extending nbdev. This is less burdensome to maintain and enables a writing flow where we don&#39;t have to go back and forth from existing system. . Now even though lot of functionality is enabled in orgmode bridge to fastpages, which mirrors or sometimes extends notebook version there are a few pending issues . 3.2 Outstanding Tasks . TODO Fix links inside boxes in org mode | TODO Provide more controls on code folding , currently implemented on every block. | TODO Define a specific layout for org files which can include some common header files. | DONE Define a mechanism for code highlighting It can be done using custom css like org.css. But thing approach need some customization to match with default styles | Another approach is to use highlight.js and minor customization to read code blocks. This may be more reliable way to approach this | . . Note: Best Solution was to define a derived export backend and wrap source block in highlighting liquid template. It is now implemented in fpemacs.el . | TODO Handle internal links and html export more robustly | TODO Enable org-reveal functionality to directly generate and intergrate reveal-js presentation in blog post | TODO Create a demo for exporting to beamer and intergrating with blog post . Tip: Some custom function to streamline above might need to be included in fpemacs.el . I hope you find this blog post informative to get started with org mode.Please share your suggestions below which can help in improving or extending this setup. . |",
            "url": "https://fastpagesdev.netlify.app/fastpages/orgmode/2020/04/27/Blogging-with-Orgmode-and-FastPages.html",
            "relUrl": "/fastpages/orgmode/2020/04/27/Blogging-with-Orgmode-and-FastPages.html",
            "date": " • Apr 27, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Emacs Configuration",
            "content": "Table of Contents . 1. Emacs init.el | 2. Emacs Customization Group | 3. Emacs Repositories | 4. Personal Information | 5. Emacs : Add Info directory | 6. Emacs: Backups | 7. Emacs: SaveHist | 8. Emacs Additional Infopath | 9. Utility Functions 9.1. Function to open this configuration file | . | 10. Splash Screen and bars | 11. Configure Emacs for use-package | 12. Improve performance on Windows | 13. Emacs Custom Theme | 14. Setup Ido and smex | 15. Setup Guru Mode | 16. Setup Magit | 17. Setup Company Mode | 18. Org-Mode Settings | 19. Nikola Blog Settings | 20. Games 20.1. Chess | . | 21. Setup ox-reveal | 22. Setup htmlize and addtional org-contrib | 23. String manupulation library elisp | 24. FastPages: Links and Backend 24.1. Jekyll Liquid Tag Handling | 24.2. FastPages Links | 24.3. FastPages Backend | . | 25. Fastpages Blog Publish function | . As a tradition for sharing your literate configuration in org mode. I am sharing my complete emacs configuration here. People who are going to use Org Mode with FastPages for Blogging might find the last section useful. . 1 Emacs init.el . (package-initialize) (require &#39;org) (org-babel-load-file (expand-file-name &quot;configuration.org&quot; user-emacs-directory)) . 2 Emacs Customization Group . (setq custom-file (expand-file-name &quot;custom.el&quot; user-emacs-directory)) . . 3 Emacs Repositories . (require &#39;package) ;;;(add-to-list &#39;package-archives ;;;&#39; &#39;(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;) t) (add-to-list &#39;package-archives &#39;(&quot;melpa-stable&quot; . &quot;https://stable.melpa.org/packages/&quot;) t) (add-to-list &#39;package-archives &#39;(&quot;melpa&quot; . &quot;http://melpa.org/packages/&quot;) t) (add-to-list &#39;package-archives &#39;(&quot;org&quot; . &quot;http://orgmode.org/elpa/&quot;) t) (when (&amp;lt; emacs-major-version 24) ;; For important compatibility libraries like cl-lib (add-to-list &#39;package-archives &#39;(&quot;gnu&quot; . &quot;http://elpa.gnu.org/packages/&quot;))) (package-initialize) . . 4 Personal Information . (setq user-full-name &quot;Rahul Saraf&quot; user-mail-address &quot;rahuketu86@gmail.com&quot;) . . 5 Emacs : Add Info directory . (setq Info-default-directory-list (append Info-default-directory-list &#39;(&quot;~/info&quot; ))) (add-hook &#39;Info-mode-hook ; After Info-mode has started (lambda () (setq Info-additional-directory-list Info-default-directory-list) )) . . 6 Emacs: Backups . (setq backup-directory-alist &#39;((&quot;.&quot; . &quot;~/.emacs.d/backups&quot;))) (setq delete-old-versions -1) (setq version-control t) (setq vc-make-backup-files t) . . 7 Emacs: SaveHist . (setq savehist-file &quot;~/.emacs.d/savehist&quot;) (savehist-mode 1) (setq history-length t) (setq history-delete-duplicates t) (setq savehist-save-minibuffer-history 1) (setq savehist-additional-variables &#39;(kill-ring search-ring regexp-search-ring)) . . 8 Emacs Additional Infopath . (add-to-list &#39;Info-default-directory-list &quot;~/.emacs.d/info&quot;) . . 9 Utility Functions . 9.1 Function to open this configuration file . (defvar config-file-name &quot;configuration.org&quot;) (defun my-config() &quot;Function to open org configuration file&quot; (interactive) (find-file (expand-file-name config-file-name user-emacs-directory))) . . 10 Splash Screen and bars . (setq inhibit-splash-screen t ;; initial-scratch-message nil ;; initial-major-mode &#39;org-mode ) (scroll-bar-mode -1) (tool-bar-mode -1) ;; (menu-bar-mode -1) . . 11 Configure Emacs for use-package . (unless (package-installed-p &#39;use-package) (package-refresh-contents) (package-install &#39;use-package)) ;; (setq use-package-verbose t) ;; (setq use-package-always-ensure t) ;; (eval-when-compile ;; (require &#39;use-package)) ;; (use-package auto-compile ;; :config (auto-compile-on-load-mode)) ;; (require &#39;diminish) ;; ;; (require &#39;bind-key) . . 12 Improve performance on Windows . Improving File Saving Performance on windows. . (setq w32-get-true-file-attributes nil) . . 13 Emacs Custom Theme . (use-package monokai-theme :ensure t :init (load-theme &#39;monokai t)) . . 14 Setup Ido and smex . ;; Activate ido (require &#39;ido) (ido-mode t) ;; Set up smex (use-package smex :ensure t :bind ((&quot;M-x&quot; . smex)) :config (smex-initialize)) . . 15 Setup Guru Mode . Guru mode works by disabling common key bindings and pushing for Emacs standard key bindings. Instead of global hook up Textmode and other so that it plays nice with ido-mode. . (use-package guru-mode :ensure t :init (setq-default major-mode &#39;text-mode) :config (add-hook &#39;prog-mode-hook &#39;guru-mode) (add-hook &#39;text-mode-hook &#39;guru-mode) ) . . 16 Setup Magit . Magit is a git porcelain. With this we can stay within emacs for configuration modifications and commiting to git. . (use-package magit :ensure t :bind (&quot;C-x g&quot; . magit-status)) . . 17 Setup Company Mode . Company mode is used for autocompletion in Emacs. . (use-package company :ensure t :defer t :config (global-company-mode) ;; :config ;; (global-company-mode)) ) . . 18 Org-Mode Settings . Global settings for all the org-mode buffers. . (use-package org-mode :init (remove-hook &#39;org-mode-hook &#39;guru-mode) :bind ((&quot; C-cl&quot; . org-store-link) (&quot; C-ca&quot; . org-agenda) (&quot; C-cc&quot; . org-capture) (&quot; C-cb&quot; . org-iswitch)) :config (remove-hook &#39;org-mode-hook &#39;guru-mode)) . . Additional Org Mode plugins . Org Mode with Twitter bootstrap(ox-twbs) . (use-package ox-twbs :ensure t :defer t) . . | . 19 Nikola Blog Settings . ;; (use-package htmlize ;; :ensure t) ;; (require &#39;org) ;; (require &#39;ox-html) ;; ;;; Custom configuration for the export. ;; ;;; Add any custom configuration that you would like to &#39;conf.el&#39;. ;; (setq nikola-use-pygments t ;; org-export-with-toc nil ;; org-export-with-section-numbers nil ;; org-startup-folded &#39;showeverything) ;; ;; Load additional configuration from conf.el ;; (let ((conf (expand-file-name &quot;conf.el&quot; (file-name-directory load-file-name)))) ;; (if (file-exists-p conf) ;; (load-file conf))) ;; ;;; Macros ;; ;; Load Nikola macros ;; (setq nikola-macro-templates ;; (with-current-buffer ;; (find-file ;; (expand-file-name &quot;macros.org&quot; (file-name-directory load-file-name))) ;; (org-macro--collect-macros))) ;; ;;; Code highlighting ;; (defun org-html-decode-plain-text (text) ;; &quot;Convert HTML character to plain TEXT. i.e. do the inversion of ;; `org-html-encode-plain-text`. Possible conversions are set in ;; `org-html-protect-char-alist&#39;.&quot; ;; (mapc ;; (lambda (pair) ;; (setq text (replace-regexp-in-string (cdr pair) (car pair) text t t))) ;; (reverse org-html-protect-char-alist)) ;; text) ;; ;; Use pygments highlighting for code ;; (defun pygmentize (lang code) ;; &quot;Use Pygments to highlight the given code and return the output&quot; ;; (with-temp-buffer ;; (insert code) ;; (let ((lang (or (cdr (assoc lang org-pygments-language-alist)) &quot;text&quot;))) ;; (shell-command-on-region (point-min) (point-max) ;; (format &quot;pygmentize -f html -l %s&quot; lang) ;; (buffer-name) t)) ;; (buffer-string))) ;; (defconst org-pygments-language-alist ;; &#39;((&quot;asymptote&quot; . &quot;asymptote&quot;) ;; (&quot;awk&quot; . &quot;awk&quot;) ;; (&quot;c&quot; . &quot;c&quot;) ;; (&quot;c++&quot; . &quot;cpp&quot;) ;; (&quot;cpp&quot; . &quot;cpp&quot;) ;; (&quot;clojure&quot; . &quot;clojure&quot;) ;; (&quot;css&quot; . &quot;css&quot;) ;; (&quot;d&quot; . &quot;d&quot;) ;; (&quot;emacs-lisp&quot; . &quot;scheme&quot;) ;; (&quot;F90&quot; . &quot;fortran&quot;) ;; (&quot;gnuplot&quot; . &quot;gnuplot&quot;) ;; (&quot;groovy&quot; . &quot;groovy&quot;) ;; (&quot;haskell&quot; . &quot;haskell&quot;) ;; (&quot;java&quot; . &quot;java&quot;) ;; (&quot;js&quot; . &quot;js&quot;) ;; (&quot;julia&quot; . &quot;julia&quot;) ;; (&quot;latex&quot; . &quot;latex&quot;) ;; (&quot;lisp&quot; . &quot;lisp&quot;) ;; (&quot;makefile&quot; . &quot;makefile&quot;) ;; (&quot;matlab&quot; . &quot;matlab&quot;) ;; (&quot;mscgen&quot; . &quot;mscgen&quot;) ;; (&quot;ocaml&quot; . &quot;ocaml&quot;) ;; (&quot;octave&quot; . &quot;octave&quot;) ;; (&quot;perl&quot; . &quot;perl&quot;) ;; (&quot;picolisp&quot; . &quot;scheme&quot;) ;; (&quot;python&quot; . &quot;python&quot;) ;; (&quot;r&quot; . &quot;r&quot;) ;; (&quot;ruby&quot; . &quot;ruby&quot;) ;; (&quot;sass&quot; . &quot;sass&quot;) ;; (&quot;scala&quot; . &quot;scala&quot;) ;; (&quot;scheme&quot; . &quot;scheme&quot;) ;; (&quot;sh&quot; . &quot;sh&quot;) ;; (&quot;sql&quot; . &quot;sql&quot;) ;; (&quot;sqlite&quot; . &quot;sqlite3&quot;) ;; (&quot;tcl&quot; . &quot;tcl&quot;)) ;; &quot;Alist between org-babel languages and Pygments lexers. ;; lang is downcased before assoc, so use lowercase to describe language available. ;; See: http://orgmode.org/worg/org-contrib/babel/languages.html and ;; http://pygments.org/docs/lexers/ for adding new languages to the mapping.&quot;) ;; ;; Override the html export function to use pygments ;; (defun org-html-src-block (src-block contents info) ;; &quot;Transcode a SRC-BLOCK element from Org to HTML. ;; CONTENTS holds the contents of the item. INFO is a plist holding ;; contextual information.&quot; ;; (if (org-export-read-attribute :attr_html src-block :textarea) ;; (org-html--textarea-block src-block) ;; (let ((lang (org-element-property :language src-block)) ;; (code (org-element-property :value src-block)) ;; (code-html (org-html-format-code src-block info))) ;; (if nikola-use-pygments ;; (pygmentize (downcase lang) (org-html-decode-plain-text code)) ;; code-html)))) ;; ;; Export images with custom link type ;; (defun org-custom-link-img-url-export (path desc format) ;; (cond ;; ((eq format &#39;html) ;; (format &quot;&amp;lt;img src= &quot;%s &quot; alt= &quot;%s &quot;/&amp;gt;&quot; path desc)))) ;; (org-add-link-type &quot;img-url&quot; nil &#39;org-custom-link-img-url-export) ;; ;; Export function used by Nikola. ;; (defun nikola-html-export (infile outfile) ;; &quot;Export the body only of the input file and write it to ;; specified location.&quot; ;; (with-current-buffer (find-file infile) ;; (org-macro-replace-all nikola-macro-templates) ;; (org-html-export-as-html nil nil t t) ;; (write-file outfile nil))) . . 20 Games . 20.1 Chess . (use-package chess :ensure t :defer t) . . 21 Setup ox-reveal . (use-package org-re-reveal :ensure t :init ) (package-refresh-contents) (use-package reftex :ensure t :commands turn-on-reftex ) (use-package org-ref :ensure t :after org) (use-package org-re-reveal-ref :ensure t :after org) . . 22 Setup htmlize and addtional org-contrib . (dolist (pkg &#39;(org-plus-contrib htmlize)) (unless (package-installed-p pkg) (package-install pkg))) . . 23 String manupulation library elisp . (use-package s :ensure t) . . 24 FastPages: Links and Backend . 24.1 Jekyll Liquid Tag Handling . Some code for converting links to jekyll liquid tags . This is to enable fastpages specific boxes and remote link funcitionality . 24.2 FastPages Links . (defun embed-img (url caption) (cond ((s-starts-with? &quot;/images&quot; url) (jekyll-include-local-img url caption)) ((s-starts-with? &quot;/assets&quot; url) (jekyll-include-local-img url caption)) (t (jekyll-include-remote-img url caption)))) ;;(jekyll-include-img &quot;/images/Emacs.png&quot; &quot;Emacs&quot;) (defun embed-iframe (url) (s-lex-format &quot; &amp;lt;div style= &quot;text-align: center; &quot;&amp;gt; &amp;lt;iframe width= &quot;560 &quot; height= &quot;315 &quot; src= &quot;${url} &quot; frameborder= &quot;0 &quot; allow= &quot;autoplay; encrypted-media &quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt; &amp;lt;/div&amp;gt;&quot;)) (defun get-yt-code (url) (car (s-split &quot;&amp;amp;list=&quot; (s-chop-prefixes &#39;(&quot;https://www.youtube.com/watch?v=&quot; &quot;https://www.youtube.com/playlist?list=&quot; &quot;https://youtu.be/&quot;) url)))) ;;(get-yt-code &quot;https://www.youtube.com/watch?v=SmH3BPpl0TI&quot;) ;;(get-yt-code &quot;https://www.youtube.com/playlist?list=PLxc79l2wpbJYTI5rv2os7OoKQMqxReZpr&quot;) ;;(get-yt-code &quot;https://www.youtube.com/watch?v=SzA2YODtgK4&amp;amp;list=PLxc79l2wpbJYTI5rv2os7OoKQMqxReZpr&quot;) ;;(get-yt-code &quot;https://youtu.be/VawlmG9tsXI&quot;) (defun embed-yt(url) (if (s-starts-with? &quot;https://www.youtube.com/playlist?list=&quot; url) (let ((code (get-yt-code url)) (embed-base &quot;https://www.youtube.com/embed/videoseries?list=&quot;)) (embed-iframe (concat embed-base code))) (jekyll-include &quot;youtube.html&quot; (concat &quot;https://youtu.be/&quot; (get-yt-code url))))) ;;(embed-yt &quot;https://www.youtube.com/watch?v=SmH3BPpl0TI&quot;) ;;(embed-yt &quot;https://www.youtube.com/playlist?list=PLxc79l2wpbJYTI5rv2os7OoKQMqxReZpr&quot;) ;;(embed-yt &quot;https://youtu.be/VawlmG9tsXI&quot;) (org-link-set-parameters &quot;yt&quot; :export (lambda (path desc backend) (cond ((eq &#39;html backend) (embed-yt path )))) :help-echo &quot;This links helps in exporting link to jekyll youtube liquid template&quot;) (org-link-set-parameters &quot;twitter&quot; :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include &quot;twitter.html&quot; path )))) :help-echo &quot;This links helps in exporting link to jekyll liquid twitter template&quot;) (org-link-set-parameters &quot;img&quot; :export (lambda (path desc backend) (cond ((eq &#39;html backend) (embed-img path desc)))) :help-echo &quot;This links helps in exporting link to jekyll liquid image template&quot;) (org-link-set-parameters &quot;alert&quot; :face &#39;(:foreground &quot;red&quot; :underline t) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;alert.html&quot; &quot;text&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll alert template&quot;) (org-link-set-parameters &quot;info&quot; :face &#39;(:foreground &quot;blue&quot; :underline t) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;info.html&quot; &quot;text&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll info template&quot;) (org-link-set-parameters &quot;warning&quot; :face &#39;(:foreground &quot;pink&quot;) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;warning.html&quot; &quot;content&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll warning template&quot;) (org-link-set-parameters &quot;important&quot; :face &#39;(:foreground &quot;yellow&quot;) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;important.html&quot; &quot;content&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll important template&quot;) (org-link-set-parameters &quot;tip&quot; :face &#39;(:foreground &quot;green&quot;) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;tip.html&quot; &quot;content&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll tip template&quot;) (org-link-set-parameters &quot;note&quot; :face &#39;(:foreground &quot;light blue&quot;) :export (lambda (path desc backend) (cond ((eq &#39;html backend) (jekyll-include-box &quot;note.html&quot; &quot;content&quot; (or desc path))))) :help-echo &quot;This links helps in exporting link to jekyll note template&quot;) (org-link-set-parameters &quot;iframe&quot; :export (lambda (path desc backend) (cond ((eq &#39;html backend) (embed-iframe path )))) :help-echo &quot;This links help in embedding iframe and revealjs presentation&quot;) . . 24.3 FastPages Backend . (defun org-fp-code-folding (block) (s-lex-format &quot;&amp;lt;div class= &quot;cell border-box-sizing code_cell rendered &quot;&amp;gt; &amp;lt;details class= &quot;description &quot;&amp;gt; &amp;lt;summary class= &quot;btn btn-sm &quot; data-open= &quot;Hide Code &quot; data-close= &quot;Show Code &quot;&amp;gt;&amp;lt;/summary&amp;gt; &amp;lt;p&amp;gt; &amp;lt;div class= &quot;input &quot;&amp;gt; ${block} &amp;lt;/div&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;/details&amp;gt; &amp;lt;/div&amp;gt;&quot;)) (defun org-fp-html-src-block (src-block contents info) &quot;Transcode a SRC-BLOCK element from Org to HTML. CONTENTS holds the contents of the item. INFO is a plist holding contextual information.&quot; (if (org-export-read-attribute :attr_html src-block :textarea) (org-html--textarea-block src-block) (let ((lang (org-element-property :language src-block)) (caption (org-export-get-caption src-block)) (code (org-html-format-code src-block info)) (label (let ((lbl (and (org-element-property :name src-block) (org-export-get-reference src-block info)))) (if lbl (format &quot; id= &quot;%s &quot;&quot; lbl) &quot;&quot;)))) (org-fp-code-folding (if (not lang) (format &quot;&amp;lt;pre class= &quot;example &quot;%s&amp;gt; n%s&amp;lt;/pre&amp;gt;&quot; label code) (format &quot;&amp;lt;div class= &quot;org-src-container &quot;&amp;gt; n%s%s n&amp;lt;/div&amp;gt;&quot; (if (not caption) &quot;&quot; (format &quot;&amp;lt;label class= &quot;org-src-name &quot;&amp;gt;%s&amp;lt;/label&amp;gt;&quot; (org-export-data caption info))) (jekyll-highlight lang code))))))) ;; (format &quot; n&amp;lt;pre class= &quot;src src-%s &quot;%s&amp;gt;%s&amp;lt;/pre&amp;gt;&quot; lang label code)))))) (defun org-fp-inline-src-block (inline-src-block _contents info) &quot;Transcode an INLINE-SRC-BLOCK element from Org to HTML. CONTENTS holds the contents of the item. INFO is a plist holding contextual information.&quot; (let* ((lang (org-element-property :language inline-src-block)) (code (org-html-fontify-code (org-element-property :value inline-src-block) lang)) (label (let ((lbl (and (org-element-property :name inline-src-block) (org-export-get-reference inline-src-block info)))) (if (not lbl) &quot;&quot; (format &quot; id= &quot;%s &quot;&quot; lbl))))) (jekyll-highlight lang code))) (org-export-define-derived-backend &#39;fastpages &#39;html :menu-entry &#39;(?f &quot;FastPages Export Backend&quot; ((?A &quot;As HTML Buffer (Fastpages)&quot; org-fp-export-as-html) (?a &quot;As HTML file (Fastpages)&quot; org-fp-export-to-html))) :translate-alist &#39;((inline-src-block . org-fp-inline-src-block) (src-block . org-fp-html-src-block))) ;;;###autoload (defun org-fp-export-as-html (&amp;amp;optional async subtreep visible-only body-only ext-plist) (interactive) (org-export-to-buffer &#39;fastpages &quot;*Org FP HTML Export*&quot; async subtreep visible-only body-only ext-plist (lambda () (set-auto-mode t)))) ;;;###autoload (defun org-fp-convert-region-to-html () (interactive) (org-export-replace-region-by &#39;fastpages)) ;;;###autoload (defun org-fp-export-to-html (&amp;amp;optional async subtreep visible-only body-only ext-plist) (interactive) (let* ((extension (concat (when (&amp;gt; (length org-html-extension) 0) &quot;.&quot;) (or (plist-get ext-plist :html-extension) org-html-extension &quot;html&quot;))) (file (org-export-output-file-name extension subtreep)) (org-export-coding-system org-html-coding-system)) (org-export-to-file &#39;fastpages file async subtreep visible-only body-only ext-plist))) ;;;###autoload (defun org-fp-publish-to-html (plist filename pub-dir) (org-publish-org-to &#39;fastpages filename (concat (when (&amp;gt; (length org-html-extension) 0) &quot;.&quot;) (or (plist-get plist :html-extension) org-html-extension &quot;html&quot;)) plist pub-dir)) . . 25 Fastpages Blog Publish function . Publishing Code for Fastpages blog . (cd &quot;/Landmark2/pdo/Code/ALDAOps/FastPagesDev&quot;) (setq org-html-htmlize-output-type nil) (setq org-publish-project-alist &#39;( (&quot;org-post-fastpages&quot; ;; Path to your org files. :base-directory &quot;./_org/_posts&quot; :base-extension &quot;org&quot; ;; Path to your Jekyll project. :publishing-directory &quot;./_posts/&quot; :recursive t :publishing-function org-fp-publish-to-html :html-extension &quot;md&quot; :body-only t ;; Only export section between &amp;lt;body&amp;gt; &amp;lt;/body&amp;gt; ) (&quot;org-static-fastpages&quot; :base-directory &quot;./_org/assets&quot; :base-extension &quot;css |js |png |jpg |gif |pdf |mp3 |ogg |swf |php&quot; :publishing-directory &quot;./assets/&quot; :recursive t :publishing-function org-publish-attachment ) (&quot;org-images-fastpages&quot; :base-directory &quot;./_org/images&quot; :base-extension &quot;css |js |png |jpg |gif |pdf |mp3 |ogg |swf |php&quot; :publishing-directory &quot;./images/&quot; :recursive t :publishing-function org-publish-attachment ) (&quot;fastpages&quot; :components (&quot;org-post-fastpages&quot; &quot;org-static-fastpages&quot; &quot;org-images-fastpages&quot;)) )) (defun fastpages-publish-all () &quot;Publish the blog to HTML.&quot; (interactive) (org-publish-all)) . .",
            "url": "https://fastpagesdev.netlify.app/orgmode/2020/04/25/Emacs-Configuration.html",
            "relUrl": "/orgmode/2020/04/25/Emacs-Configuration.html",
            "date": " • Apr 25, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://fastpagesdev.netlify.app/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://fastpagesdev.netlify.app/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://fastpagesdev.netlify.app/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}