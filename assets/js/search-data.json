{
  
    
        "post0": {
            "title": "Bloggingorg2",
            "content": "Table of Contents . 1. Export to FastPages | . . layout: post categories: [orgmode] title: An Example Markdown Post222 — . 1 Export to FastPages . This is the beginning. I am gonna test it again. Getting errors how to fix.Updateding sss . print(&quot;Hello World 2&quot;) .",
            "url": "https://rahuketu86.github.io/FastPagesDev/2020/04/26/BloggingOrg2.html",
            "relUrl": "/2020/04/26/BloggingOrg2.html",
            "date": " • Apr 26, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Blogging With Org And Fastpages",
            "content": "Table of Contents . 1. Export to FastPages | . . toc: true layout: post categories: [orgmode] title: Blog XYZ — . 1 Export to FastPages . This is the beginning. I am gonna test it again. Getting errors how to fix it. Updatingsss . print(&quot;Hello World&quot;) .",
            "url": "https://rahuketu86.github.io/FastPagesDev/2020/04/26/Blogging-with-Org-and-FastPages.html",
            "relUrl": "/2020/04/26/Blogging-with-Org-and-FastPages.html",
            "date": " • Apr 26, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Emacs Configuration",
            "content": "Table of Contents . 1. Emacs init.el | 2. Emacs Customization Group | 3. Emacs Repositories | 4. Personal Information | 5. Emacs : Add Info directory | 6. Emacs: Backups | 7. Emacs: SaveHist | 8. Emacs Additional Infopath | 9. Utility Functions 9.1. Function to open this configuration file | . | 10. Splash Screen and bars | 11. Configure Emacs for use-package | 12. Improve performance on Windows | 13. Emacs Custom Theme | 14. Setup Ido and smex | 15. Setup Guru Mode | 16. Setup Magit | 17. Setup Company Mode | 18. Org-Mode Settings | 19. Nikola Blog Settings | 20. Games 20.1. Chess | . | . . toc: true layout: post categories: [orgmode] title: Emacs Conifguration is fixed — . This post contains sample configuration for my emacs in an org filesss . 1 Emacs init.el . (package-initialize) (require &#39;org) (org-babel-load-file (expand-file-name &quot;configuration.org&quot; user-emacs-directory)) . 2 Emacs Customization Group . (setq custom-file (expand-file-name &quot;custom.el&quot; user-emacs-directory)) . 3 Emacs Repositories . (require &#39;package) ;;;(add-to-list &#39;package-archives ;;;&#39; &#39;(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;) t) (add-to-list &#39;package-archives &#39;(&quot;melpa-stable&quot; . &quot;https://stable.melpa.org/packages/&quot;) t) (add-to-list &#39;package-archives &#39;(&quot;melpa&quot; . &quot;http://melpa.org/packages/&quot;) t) (add-to-list &#39;package-archives &#39;(&quot;org&quot; . &quot;http://orgmode.org/elpa/&quot;) t) (when (&lt; emacs-major-version 24) ;; For important compatibility libraries like cl-lib (add-to-list &#39;package-archives &#39;(&quot;gnu&quot; . &quot;http://elpa.gnu.org/packages/&quot;))) (package-initialize) . 4 Personal Information . (setq user-full-name &quot;Rahul Saraf&quot; user-mail-address &quot;rahuketu86@gmail.com&quot;) . 5 Emacs : Add Info directory . (setq Info-default-directory-list (append Info-default-directory-list &#39;(&quot;~/info&quot; ))) (add-hook &#39;Info-mode-hook ; After Info-mode has started (lambda () (setq Info-additional-directory-list Info-default-directory-list) )) . 6 Emacs: Backups . (setq backup-directory-alist &#39;((&quot;.&quot; . &quot;~/.emacs.d/backups&quot;))) (setq delete-old-versions -1) (setq version-control t) (setq vc-make-backup-files t) . 7 Emacs: SaveHist . (setq savehist-file &quot;~/.emacs.d/savehist&quot;) (savehist-mode 1) (setq history-length t) (setq history-delete-duplicates t) (setq savehist-save-minibuffer-history 1) (setq savehist-additional-variables &#39;(kill-ring search-ring regexp-search-ring)) . 8 Emacs Additional Infopath . (add-to-list &#39;Info-default-directory-list &quot;~/.emacs.d/info&quot;) . 9 Utility Functions . 9.1 Function to open this configuration file . (defvar config-file-name &quot;configuration.org&quot;) (defun my-config() &quot;Function to open org configuration file&quot; (interactive) (find-file (expand-file-name config-file-name user-emacs-directory))) . 10 Splash Screen and bars . (setq inhibit-splash-screen t ;; initial-scratch-message nil ;; initial-major-mode &#39;org-mode ) (scroll-bar-mode -1) (tool-bar-mode -1) ;; (menu-bar-mode -1) . 11 Configure Emacs for use-package . (unless (package-installed-p &#39;use-package) (package-refresh-contents) (package-install &#39;use-package)) ;; (setq use-package-verbose t) ;; (setq use-package-always-ensure t) ;; (eval-when-compile ;; (require &#39;use-package)) ;; (use-package auto-compile ;; :config (auto-compile-on-load-mode)) ;; (require &#39;diminish) ;; ;; (require &#39;bind-key) . 12 Improve performance on Windows . Improving File Saving Performance on windows. . (setq w32-get-true-file-attributes nil) . 13 Emacs Custom Theme . (use-package monokai-theme :ensure t :init (load-theme &#39;monokai t)) . 14 Setup Ido and smex . ;; Activate ido (require &#39;ido) (ido-mode t) ;; Set up smex (use-package smex :ensure t :bind ((&quot;M-x&quot; . smex)) :config (smex-initialize)) . 15 Setup Guru Mode . Guru mode works by disabling common key bindings and pushing for Emacs standard key bindings. Instead of global hook up Textmode and other so that it plays nice with ido-mode. . (use-package guru-mode :ensure t :init (setq-default major-mode &#39;text-mode) :config (add-hook &#39;prog-mode-hook &#39;guru-mode) (add-hook &#39;text-mode-hook &#39;guru-mode) ) . 16 Setup Magit . Magit is a git porcelain. With this we can stay within emacs for configuration modifications and commiting to git. . (use-package magit :ensure t :bind (&quot;C-x g&quot; . magit-status)) . 17 Setup Company Mode . Company mode is used for autocompletion in Emacs. . (use-package company :ensure t :defer t :config (global-company-mode) ;; :config ;; (global-company-mode)) ) . 18 Org-Mode Settings . Global settings for all the org-mode buffers. . (use-package org-mode :init (remove-hook &#39;org-mode-hook &#39;guru-mode) :bind ((&quot; C-cl&quot; . org-store-link) (&quot; C-ca&quot; . org-agenda) (&quot; C-cc&quot; . org-capture) (&quot; C-cb&quot; . org-iswitch)) :config (remove-hook &#39;org-mode-hook &#39;guru-mode)) . Additional Org Mode plugins . Org Mode with Twitter bootstrap(ox-twbs) . (use-package ox-twbs :ensure t :defer t) . | . 19 Nikola Blog Settings . (use-package htmlize :ensure t) (require &#39;org) (require &#39;ox-html) ;;; Custom configuration for the export. ;;; Add any custom configuration that you would like to &#39;conf.el&#39;. (setq nikola-use-pygments t org-export-with-toc nil org-export-with-section-numbers nil org-startup-folded &#39;showeverything) ;; Load additional configuration from conf.el (let ((conf (expand-file-name &quot;conf.el&quot; (file-name-directory load-file-name)))) (if (file-exists-p conf) (load-file conf))) ;;; Macros ;; Load Nikola macros (setq nikola-macro-templates (with-current-buffer (find-file (expand-file-name &quot;macros.org&quot; (file-name-directory load-file-name))) (org-macro--collect-macros))) ;;; Code highlighting (defun org-html-decode-plain-text (text) &quot;Convert HTML character to plain TEXT. i.e. do the inversion of `org-html-encode-plain-text`. Possible conversions are set in `org-html-protect-char-alist&#39;.&quot; (mapc (lambda (pair) (setq text (replace-regexp-in-string (cdr pair) (car pair) text t t))) (reverse org-html-protect-char-alist)) text) ;; Use pygments highlighting for code (defun pygmentize (lang code) &quot;Use Pygments to highlight the given code and return the output&quot; (with-temp-buffer (insert code) (let ((lang (or (cdr (assoc lang org-pygments-language-alist)) &quot;text&quot;))) (shell-command-on-region (point-min) (point-max) (format &quot;pygmentize -f html -l %s&quot; lang) (buffer-name) t)) (buffer-string))) (defconst org-pygments-language-alist &#39;((&quot;asymptote&quot; . &quot;asymptote&quot;) (&quot;awk&quot; . &quot;awk&quot;) (&quot;c&quot; . &quot;c&quot;) (&quot;c++&quot; . &quot;cpp&quot;) (&quot;cpp&quot; . &quot;cpp&quot;) (&quot;clojure&quot; . &quot;clojure&quot;) (&quot;css&quot; . &quot;css&quot;) (&quot;d&quot; . &quot;d&quot;) (&quot;emacs-lisp&quot; . &quot;scheme&quot;) (&quot;F90&quot; . &quot;fortran&quot;) (&quot;gnuplot&quot; . &quot;gnuplot&quot;) (&quot;groovy&quot; . &quot;groovy&quot;) (&quot;haskell&quot; . &quot;haskell&quot;) (&quot;java&quot; . &quot;java&quot;) (&quot;js&quot; . &quot;js&quot;) (&quot;julia&quot; . &quot;julia&quot;) (&quot;latex&quot; . &quot;latex&quot;) (&quot;lisp&quot; . &quot;lisp&quot;) (&quot;makefile&quot; . &quot;makefile&quot;) (&quot;matlab&quot; . &quot;matlab&quot;) (&quot;mscgen&quot; . &quot;mscgen&quot;) (&quot;ocaml&quot; . &quot;ocaml&quot;) (&quot;octave&quot; . &quot;octave&quot;) (&quot;perl&quot; . &quot;perl&quot;) (&quot;picolisp&quot; . &quot;scheme&quot;) (&quot;python&quot; . &quot;python&quot;) (&quot;r&quot; . &quot;r&quot;) (&quot;ruby&quot; . &quot;ruby&quot;) (&quot;sass&quot; . &quot;sass&quot;) (&quot;scala&quot; . &quot;scala&quot;) (&quot;scheme&quot; . &quot;scheme&quot;) (&quot;sh&quot; . &quot;sh&quot;) (&quot;sql&quot; . &quot;sql&quot;) (&quot;sqlite&quot; . &quot;sqlite3&quot;) (&quot;tcl&quot; . &quot;tcl&quot;)) &quot;Alist between org-babel languages and Pygments lexers. lang is downcased before assoc, so use lowercase to describe language available. See: http://orgmode.org/worg/org-contrib/babel/languages.html and http://pygments.org/docs/lexers/ for adding new languages to the mapping.&quot;) ;; Override the html export function to use pygments (defun org-html-src-block (src-block contents info) &quot;Transcode a SRC-BLOCK element from Org to HTML. CONTENTS holds the contents of the item. INFO is a plist holding contextual information.&quot; (if (org-export-read-attribute :attr_html src-block :textarea) (org-html--textarea-block src-block) (let ((lang (org-element-property :language src-block)) (code (org-element-property :value src-block)) (code-html (org-html-format-code src-block info))) (if nikola-use-pygments (pygmentize (downcase lang) (org-html-decode-plain-text code)) code-html)))) ;; Export images with custom link type (defun org-custom-link-img-url-export (path desc format) (cond ((eq format &#39;html) (format &quot;&lt;img src= &quot;%s &quot; alt= &quot;%s &quot;/&gt;&quot; path desc)))) (org-add-link-type &quot;img-url&quot; nil &#39;org-custom-link-img-url-export) ;; Export function used by Nikola. (defun nikola-html-export (infile outfile) &quot;Export the body only of the input file and write it to specified location.&quot; (with-current-buffer (find-file infile) (org-macro-replace-all nikola-macro-templates) (org-html-export-as-html nil nil t t) (write-file outfile nil))) . 20 Games . 20.1 Chess . (use-package chess :ensure t :defer t) .",
            "url": "https://rahuketu86.github.io/FastPagesDev/2020/04/25/Emacs-Configuration.html",
            "relUrl": "/2020/04/25/Emacs-Configuration.html",
            "date": " • Apr 25, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rahuketu86.github.io/FastPagesDev/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rahuketu86.github.io/FastPagesDev/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rahuketu86.github.io/FastPagesDev/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rahuketu86.github.io/FastPagesDev/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}